//Bibliotecas

#include <stdio.h>			
#include <stdlib.h>			
#include <string.h> 

//ENTRADAS - Valores inseridos pelos jogadores
//REGRA 1 - Verificar sobreposicao de retas
//REGRA 2 - Contagem de pontos

//variaveis globais
inteira: tamanho =10, jogador=0, vencedor1=0, vencedor2=0;	

//Estrutura
tipo estrutura{
	caractere: nome1[50], nome2[50];
	caractere: matriz[100][100];
	inteira: linha, coluna;
}entradas;

//Regra para contagem de pontos e jogador fazer uma jogada novamente caso tenha conseguido pontos 
vazio: regra2(entradas entrada){ 
	
	se(entrada.matriz[entrada.linha][entrada.coluna] for igual a 'pipe'){
		se(entrada.matriz[entrada.linha][entrada.coluna - 1] for igual 'travessao' AND entrada.matriz[entrada.linha][entrada.coluna - 2] for igual a 'pipe' AND entrada.matriz[entrada.linha - 1][entrada.coluna - 1] for igual a 'travessao')
			{ 
			se(jogador for igual a 0) {
				vencedor1 recebe vencedor1 + 1; 
			} senao {
				vencedor2 recebe vencedor2 +1;
				} 
				jogador for diferente de jogador; 
			}	//Incrementa pontos para o jogador que fez a ultima jogada e inverte o numero dos jogadores, para que quem ganhou pontos possa jogar novamente
	}senao
		se(entrada.matriz[entrada.linha][entrada.coluna] for igual a 'pipe'){    //Possui erro a ser resolvido
			se(entrada.matriz[entrada.linha][entrada.coluna + 1] for igual a 'travessao' AND entrada.matriz[entrada.linha][entrada.coluna + 2] for igual a 'pipe' AND entrada.matriz[entrada.linha - 1][entrada.coluna + 1] for igual a  'travessao')
				{ 
			se(jogador for igaul a 0) {
				vencedor1 recebe vencedor1 + 1;
				} senao {
					vencedor2 recebe vencedor2 +1;
					} 
					jogador for diferente de jogador; 	
				}
		}senao
			se(entrada.matriz[entrada.linha][entrada.coluna] for igual a 'travessao'){
				se(entrada.matriz[entrada.linha][entrada.coluna-1] for igual 'pipe' AND entrada.matriz[entrada.linha][entrada.coluna + 1] for igual a 'pipe' AND entrada.matriz[entrada.linha - 1][entrada.coluna] for igual 'travessao')
					{ 
				se(jogador for igual a 0) {
					vencedor1 recebe vencedor1 + 1;
					} senao {
						vencedor2 recebe vencedor2 + 1;
						} 
						jogador for diferente de jogador;
						}
			}senao
				se(entrada.matriz[entrada.linha][entrada.coluna] for igual a 'travessao'){	//Possui erro a ser resolvido
					se(entrada.matriz[entrada.linha + 1][entrada.coluna - 1] for igual a 'pipe' AND entrada.matriz[entrada.linha + 1][entrada.coluna + 1] for igual a 'pipe' AND entrada.matriz[entrada.linha + 1][entrada.coluna] for igual a 'travessao')
						{ 
					se(jogador for igual a 0) {
						vencedor1 recebe vencedor1 + 1;
						} senao {
							vencedor2 recebe vencedor2 +1;
							} 
							jogador for diferente de jogador;
							}
				}
}	

//Regra para sobreposição de retas
inteira: regra1(entradas entrada){ 
	
	se(entrada.matriz[entrada.linha][entrada.coluna] for igual a 'pipe' OR entrada.matriz [entrada.linha][entrada.coluna] for igual a 'travessao'){ 
		imprima("Essa coordenada ja foi usada! Tente novamente...\n");
		retorne 1; // 1 retorna true
		}
	retorne 0;	// 0  retorna false
}

caractere: inserirCaracter(entradas entrada){
	
	se((entrada.linha for igual a 1) AND (entrada.coluna MÓDULO 2 for diferente de 0)){	//Nao permite inserir caracteres em locais que sera impossivel fechar um quadrado
		imprima("Essa jogada nao e muito inteligente :( \nTente novamente!\n\n");
		jogador for diferente de jogador;
		system("pause");
	}
	
	senao se(entrada.coluna MÓDULO 2 for igual a 0) 
		entrada.matriz [entrada.linha][entrada.coluna] recebe 'travessao'; 
	senao se(entrada.coluna MÓDULO 2 for diferente de 0) 
		entrada.matriz [entrada.linha][entrada.coluna] recebe 'pipe'; 
	
	retorne entrada.matriz [entrada.linha][entrada.coluna];
}

//Função que imprime as coordenadas
caractere: coordenada(entradas entrada, inteira i, inteira j){
	
	se(i for igual a 0) { 
		entrada.matriz[i][j] recebe j + '0'; }  	//Coordenadas para linhas	
											
	se(j for igual a 0) {
		entrada.matriz[i][j] recebe i + '0'; }	//Coordenadas para colunas
		
	retorne entrada.matriz[i][j];
}

//Função para imprimir a matriz
vazio: imprimirMatriz(entradas entrada){
		
	para(inteira: i  recebe 0; i for menor que tamanho; i recebe i + 1){
		para(inteira: j recebe 0; j for menor que tamanho + 1; j recebe j +1){
			
			se((entrada.matriz[i][j] for diferente de 'travessao' AND entrada.matriz[i][j] for diferente de 'pipe'))	//Faz desenho da matriz com pontos
				entrada.matriz[i][j] recebe 'ponto';
								
			entrada.matriz[i][j] recebe coordenada(entrada, i, j);		//Chama funçao para inserir coordenadas na matriz
							
			se(j for diferente de tamanho) { 
				imprima(" %c", entrada.matriz[i][j]); }		//Imprimi a matriz
			senao  { 
				imprima("\n"); }	
		}
	}	
}

//Função para leitura de informações
entradas leitura(entradas entrada){
	
	imprima("Qual o nome do jodador 1?\n");
	leia("%s", entrada.nome1);

	imprima("\nQual o nome do jodador 2?\n");
	leia("%s", entrada.nome2);

	retorne entrada;
}

//Função principal do jogo
vazio: jogo(){
	system("limpa tela");

	imprima("----------------------------------------------------------\n");
	imprima("|########################################################|\n");
	imprima("|###############                        #################|\n");
	imprima("|###############   JOGO DOS PONTINHOS   #################|\n");
	imprima("|###############                        #################|\n");
	imprima("|########################################################|\n");
	imprima("----------------------------------------------------------\n\n");
	
	entradas entrada;								//Define variavel 'entrada' para struct
	entrada = leitura(entrada);						//Chama a função leitura

	enquanto(1){
		system("limpa a tela");
		imprimirMatriz(entrada);					//Chama a função jogada
		
		imprima("\n%s = %d\n", entrada.nome1, vencedor1);
		imprima("%s = %d\n", entrada.nome2, vencedor2);	
		
		enquanto(1){									//Repetição até o jogador inserir a linha e coluna adequada
		
			se(jogador for igual a 0) 
				imprima("\n%s, digite linha e coluna:\n", entrada.nome1);
			senao 
				imprima("\n%s, digite linha e coluna:\n", entrada.nome2);
												
			leia("%d %d", &entrada.linha, &entrada.coluna);
				
			se(regra1(entrada) for igual a 0) { 
				pare; 
			}		//Verifica se há sobreposição de retas
		}
		
		entrada.matriz [entrada.linha][entrada.coluna] recebe inserirCaracter(entrada);
		
		regra2(entrada);	
		jogador for diferente de jogador;			// Alterna nome dos jogadores
	}
}

//Funcao de instruções
vazio: instrucoes(){
	system("limpa a tela");
	
	imprima("\n____________________________________COMO JOGAR____________________________________");
	imprima("\n\nCada jogador deve fazer uma reta ('|' vertical, ou '_' horizontal) nas coordenadas.");
	imprima("\nGanha aquele que fechar o maior numero de quadrados!\n\n\n");
	imprima("\n______________________________________REGRAS______________________________________");
	imprima("\n\n1 - Nao pode sobrepor retas.");
	imprima("\n2 - Um quadrado so podera ser completado caso ja houver 3 lados preenchidos.");
	imprima("\n3 - Caso o jogador complete um quadrado, tera o direito de fazer uma nova reta.\n\n");			
}

//Funcao main (principal) com menu, onde cada funcao é chamada  dentro da sua opcao
inteira principal(){
	inteira opcaoMenu;

	faça{
		system("limpa a tela");
		imprima("\n\tMenu\n\nO que voce quer fazer?\n\n1 - Iniciar o Jogo\n2 - Ver Instrucoes\n3 - Sair do jogo\n-->\n"); 		
		leia(" %i",&opcaoMenu); 

		interruptor(opcaoMenu){ 						
			caso 1: 			
				jogo(); 
				pare;
				
			caso 2:
				instrucoes();
				system("pause");		//Permite voltar para o menu sem reiniciar o jogo
				
			caso 3: 			
				system("limpa a tela");			
				imprima("\n\n\nJogo encerrado!\n\n\n");
				pare; 	
					
			padrão: 			
				imprima("\nOpcao invalida, tente novamente!\n"); 
				system("pause");		//Permite voltar para o menu sem reiniciar o jogo
		}
	}enquanto(opcaoMenu for diferente de 3);
}
