/* Bibliotecas */

//Entradas -> valores inserindo pelos jogadores

//variáveis globais
aux = 0, cont = 0, jogador = 0: inteira 


//definição da estrutura do jogo
tipo entradas: registro
inicio
	nome1[50], nome2[50]: caractere;
	matriz[100][100]: caractere;
	tamanho, linha, coluna: inteiro;
fim_registro


//Função Regras do Jogo	
	inteira: regras(entradas: entrada, inteira: aux){
		
	se(aux == 0)
		se(entrada.tamanho > 5 ou entrada.tamnho > 36){
			imprima("Tamanho inválido! Tente novamente... \n");
		}
	se(aux == 1)
		se(entrada.natriz[entrada.linha][entrada.coluna] == 'pipe' ou entrada.matriz[entrada.linha][entrada.coluna] == 'travessao')
			{
			imprima("Coordenada inválida! Tente novamnete...\n");
			retorne 1;
		}
			retorne 0;
}


//Função coordenada
caractere: coordenada(entradas: entrada, inteira: i, inteira: j){
	se ( i == 0){
		se(j maior ou igual 10){
			entrada.matriz [i][j] = 'A' + (j -10); 
		} senão {
			entrada.matriz[i][j] = j + '0;
			}
		}
		se (j == 0){
			se(i >= 10){
				entrada.matriz[i][j] = 'A'+(i-10);
			}senão{
				entrada.matriz[i][j] = i + '0';
			}
		}
		retorne entrada.matriz[i][j];
	}



//Função Jogada
void: jogada(entradas: entrada){
	
    Enquanto (1){
		i,j: inteira;
        para (i = 0; i < entrada.tamanho; i++){                  //Coluna e linha a maisa para adicionar as coordenadas
			para (j = 0; j < entrada.tamanho; i++){

            Se (cont == 0 e j % 2 == 0){                     //Imprime matriz sem nenhuma jogada
              senao se(cont == 0){
				entrada.matriz[i][j] = '.';
			  }
			  
			  entrada.matriz [i][j] = coordenada(entrada, i, j);
			  
			  se ( j != entrada.tamanho){
				  imprima(" %c", entrada.matriz[i][j]);
			  } senao{
				  imprima("\n");
			  }
			}
		}
        
		cont = 1;
		Enquanto (1){	
			aux = 1;
            
			Se(jogador == 0)
				imprima("\n%s, digite linha e coluna:\n", entrada.nome1);
			senão
				imprima("\n%s, digite linha e coluna:\n");
			
			leia ("%d %d ", &entrada.linha, &entrada.coluna);
			
			se (regras(entrada, aux) == 0){
				pare;
		}
			
			se (entrada.coluna % 2 == 0)
				entrada.matriz [ entrada.liha][entrada.coluna] = 'travessao';
			se (entrada.coluna % 2 != 0)
				entrada.matriz [entrada.linha][entrada.coluna] = 'pipe';
			
		jogador =! jogador;
		
		system("limpa tela");
              
        
              
    }   	
}


// Função para leitura das informações
entrada leitura(entradas: entrada){
    
    
    Imprima (“Qual o nome do jogador 1?:\n”);
    Leia ("%s", entrada.nome1);

    Imprima (“Qual o nome do jogador 2?:\n”);
    Leia ("%s", entrada.nome2);

	enquanto(aux == 0)
	
		Imprima (“\nInsira o tamanho do jogo (entre 5 e 36): \n”);
		Leia ("%d", &entrada.tamanho);
    
		se (regras(entrada, aux) == 0{   // verifica se o tamnho lido é valido
			pare;
		}
	retorne entrada;
}


//Funçao Principal do jogo

inteira: jogo(){
	system("color 10");  // Define cor do fundo para azul
	system("cls"); //Limpa o console
	
	imprima("----------------------------------------------------------\n");
	imprima("|########################################################|\n");
	imprima("|###############                        #################|\n");
	imprima("|###############   JOGO DOS PONTINHOS   #################|\n");
	imprima("|###############                        #################|\n");
	imprima("|########################################################|\n");
	imprima("----------------------------------------------------------\n\n");

	entradas entrada;
	entrada = leitura(entrada);  //chama a função leitura
	
	system("cls");
	jogada(entrada);   //chama a função jogada
	
}


// Função para instruções
void: instruções{
    
system("cls");
	
	imprima("\n____________________________________COMO JOGAR____________________________________");
	imprima("\n\nCada jogador deve fazer uma reta ('|' vertical, ou '_' horizontal) nas coordenadas.");
	imprima("\nGanha aquele que fechar o maior numero de quadrados!\n\n");
	imprima("\n______________________________________REGRAS______________________________________");
	imprima("\n\n1 - Nao pode sobrepor retas.");
	imprima("\n2 - Um quadrado so podera ser completado caso ja houver 3 lados preenchidos.");
	imprima("\n3 - Caso o jogador complete um quadrado, tera o direito de fazer uma nova reta.\n\n");			
}


// Menu do jogo 
inteira: main{
    int opcaoMenu;
    
	faça{
    // Imprimir “abertura do jogo” aqui

	    imprima (“Escolha uma opção: \n”);
	    imprima (“1 - Jogar ”);
	    imprima (“2 - Instruções”);
	    imprima (“3 - Sair”);
	    Leia ("%d", &opcaoMenu);
		system("cls ou clear");	
	
		caso opcao seja:
		
			caso 1:
				chamar função jogo();
				pare;
			caso 2:
				chamar função instrucoes();
				pare;
			caso 0:
				system("cls");
				imprima("\n\n\nJogo Encerrado!\n\n\n");
				
				retorne 0;
				pare;
			
			padrao:
				imprima("Digite uma opção válida\n");
	}
}enquanto(opcaoMenu);
		
} 

    
